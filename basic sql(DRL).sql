CREATE DATABASE ORG;
SHOW DATABASES;
USE ORG;
CREATE TABLE Worker(
WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
First_Name CHAR(25),
Last_Name CHAR(25),
SALARY INT(15),
JOINING_DATE DATETIME,
DEPARTMENT CHAR(25)
);

ALTER TABLE WORKER
RENAME TO Worker;
INSERT INTO 
WORKER(WORKER_ID, First_Name, Last_Name, SALARY,JOINING_DATE, DEPARTMENT) VALUES
(001, 'Monika','Arora',100000,'14-02-20 09:00:00','HR');
INSERT INTO 
Worker(WORKER_ID, First_Name, Last_Name, SALARY,JOINING_DATE, DEPARTMENT) VALUES
(002, 'Niharika','Verma',80000,'14-06-11 09:00:00','Admin'),
(003, 'Vishal','Singhal',300000,'14-02-20 09:00:00','HR'),
(004, 'Amitabh','Singh',500000,'14-02-20 09:00:00','Admin'),
(005, 'Vivek','Bhati',500000,'14-06-11 09:00:00','Admin'),
(006, 'Vipul','Diwan',200000,'14-06-11 09:00:00','Account'),
(007, 'Satish','kumar',750000,'14-01-20 09:00:00','Account'),
(008, 'Geetika','Chauhan',900000,'14-04-11 09:00:00','Admin');

SELECT *FROM Worker;

CREATE TABLE Bonus(
WORKER_REF_ID INT,
BONUS_AMOUNT INT(10),
BONUS_DATE DATETIME,
FOREIGN KEY (WORKER_REF_ID)
	REFERENCES Worker(WORKER_ID)
    ON DELETE CASCADE
);
INSERT INTO Bonus 
(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
(001,5000,'16-02-20'),
(002,3000,'16-06-11'),
(003,5000,'16-02-20'),
(001,4500,'16-02-20'),
(002,3500,'16-06-11');

CREATE TABLE Title(
WORKER_REF_ID INT,
WORKER_TITLE CHAR(25),
AFFECTED_FROM DATETIME,
FOREIGN KEY (WORKER_REF_ID)
	REFERENCES Worker(WORKER_ID)
    ON DELETE CASCADE
);
 INSERT INTO Title (WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001,'Manager','2016-02-20 00:00:00'),
 (002,'Executive','2016-06-11 00:00:00'),
 (008,'Executive','2016-06-11 00:00:00'),
 (005,'Manager','2016-06-11 00:00:00'),
 (004,'Asst.Manager','2016-06-11 00:00:00'),
 (007,'Executive','2016-06-11 00:00:00'),
 (006,'Lead','2016-06-11 00:00:00'),
 (003,'Lead','2016-06-11 00:00:00');
 
 SELECT First_Name, Salary
 FROM Worker;
 
-- DUAL TABLES:Dual tables are dummy tables created by MySQL, help users to do certain obvious actions without referring to user 
-- defined tables
 SELECT 44 + 11;
 SELECT NOW();
 SELECT ucase('ruchi');
 SELECT lcase('RuCHI');
 
 SELECT *FROM Worker WHERE Salary > 100000;
SELECT *FROM Worker WHERE DEPARTMENT = 'HR';

-- BETWEEN
 SELECT *FROM Worker WHERE Salary BETWEEN 80000 AND 300000;
 
 -- IN (Reduces OR statement)
 -- HR,ADMIN
 SELECT *FROM WORKER WHERE DEPARTMENT = 'Admin'OR 'HR';
 
 -- BETTER WAY
 SELECT *FROM WORKER WHERE DEPARTMENT IN ('Admin','HR','Ecxecutive','Account');
 -- NOT 
 SELECT *FROM WORKER WHERE DEPARTMENT NOT IN ('Admin','HR');
 
 -- WILDCARD
  SELECT *FROM Worker WHERE First_Name LIKE '%i%';
  SELECT *FROM Worker WHERE First_Name LIKE '_i%';
 
 -- ORDER BY (SORTING IN SQL)
 SELECT *FROM Worker ORDER BY Salary DESC;
 SELECT *FROM Worker ORDER BY Salary ASC;
 
 -- DISTINCT
 SELECT DISTINCT DEPARTMENT FROM Worker;
 
 -- GROUP BY
 SELECT DEPARTMENT FROM Worker GROUP BY DEPARTMENT; -- WITHOUT using aggregate function group by behave like DISTINCT.
 SELECT DEPARTMENT, COUNT(*) FROM Worker GROUP BY DEPARTMENT;
 SELECT DEPARTMENT, COUNT(DEPARTMENT) FROM Worker GROUP BY DEPARTMENT;
 
 -- AVERAGE SALARY PER DEPARTMENT
 SELECT DEPARTMENT, AVG(Salary) FROM Worker GROUP BY DEPARTMENT;
 -- MIN
 SELECT DEPARTMENT, MIN(Salary) FROM Worker GROUP BY DEPARTMENT;
 -- MAX
 SELECT DEPARTMENT, MAX(Salary) FROM Worker GROUP BY DEPARTMENT;
 -- SUM
 SELECT DEPARTMENT, SUM(Salary) FROM Worker GROUP BY DEPARTMENT;
 
 -- GROUP BY HAVING:
 SELECT DEPARTMENT, COUNT(Salary) FROM Worker GROUP BY DEPARTMENT HAVING COUNT(DEPARTMENT) > 2;
 